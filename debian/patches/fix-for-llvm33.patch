Description: Make lightspark build under LLVM3.3
Author: Sylvestre Ledru <sylvestre@debian.org>
Bug-Debian: http://bugs.debian.org/730780
Last-Update: 2013-12-02
Index: lightspark-0.7.2/src/scripting/abc.cpp
===================================================================
--- lightspark-0.7.2.orig/src/scripting/abc.cpp	2013-12-02 09:28:52.052682153 +0000
+++ lightspark-0.7.2/src/scripting/abc.cpp	2013-12-02 09:28:52.048682153 +0000
@@ -23,16 +23,12 @@
 
 #include "compat.h"
 
-#include <llvm/Module.h>
+#include <llvm/IR/Module.h>
 #include <llvm/ExecutionEngine/ExecutionEngine.h>
 #include <llvm/ExecutionEngine/JIT.h>
 #include <llvm/PassManager.h>
-#include <llvm/LLVMContext.h>
-#ifdef HAVE_DATALAYOUT_H
-#  include <llvm/DataLayout.h>
-#else
-#  include <llvm/Target/TargetData.h>
-#endif
+#include <llvm/IR/LLVMContext.h>
+#  include <llvm/IR/DataLayout.h>
 #ifdef HAVE_SUPPORT_TARGETSELECT_H
 #include <llvm/Support/TargetSelect.h>
 #else
@@ -1489,11 +1485,7 @@
 		assert_and_throw(th->ex);
 
 		th->FPM=new llvm::FunctionPassManager(th->module);
-#ifdef HAVE_DATALAYOUT_H
 		th->FPM->add(new llvm::DataLayout(*th->ex->getDataLayout()));
-#else
-		th->FPM->add(new llvm::TargetData(*th->ex->getTargetData()));
-#endif
 #ifdef EXPENSIVE_DEBUG
 		//This is pretty heavy, do not enable in release
 		th->FPM->add(llvm::createVerifierPass());
Index: lightspark-0.7.2/src/scripting/abc_codesynt.cpp
===================================================================
--- lightspark-0.7.2.orig/src/scripting/abc_codesynt.cpp	2013-12-02 09:28:52.052682153 +0000
+++ lightspark-0.7.2/src/scripting/abc_codesynt.cpp	2013-12-02 09:29:14.584682874 +0000
@@ -25,22 +25,14 @@
 #endif
 
 #include "compat.h"
-#include <llvm/Module.h>
-#include <llvm/DerivedTypes.h>
+#include <llvm/IR/Module.h>
+#include <llvm/IR/DerivedTypes.h>
 #include <llvm/ExecutionEngine/ExecutionEngine.h>
 #include <llvm/PassManager.h>
-#include <llvm/Constants.h>
-#ifdef HAVE_IRBUILDER_H
-#  include <llvm/IRBuilder.h>
-#else
-#  include <llvm/Support/IRBuilder.h>
-#endif
-#include <llvm/LLVMContext.h>
-#ifdef HAVE_DATALAYOUT_H
-#  include <llvm/DataLayout.h>
-#else
-#  include <llvm/Target/TargetData.h>
-#endif
+#include <llvm/IR/Constants.h>
+#  include <llvm/IR/IRBuilder.h>
+#include <llvm/IR/LLVMContext.h>
+#  include <llvm/IR/DataLayout.h>
 #include <sstream>
 #include "scripting/abc.h"
 #include "swftypes.h"
@@ -279,11 +271,7 @@
 	llvm::FunctionType* FT=NULL;
 
 	//Create types
-#ifdef HAVE_DATALAYOUT_H
 	ptr_type=ex->getDataLayout()->getIntPtrType(llvm_context());
-#else
-	ptr_type=ex->getTargetData()->getIntPtrType(llvm_context());
-#endif
 	//Pointer to 8 bit type, needed for pointer arithmetic
 	voidptr_type=llvm::IntegerType::get(getVm()->llvm_context(),8)->getPointerTo();
 	number_type=llvm::Type::getDoubleTy(llvm_context());
