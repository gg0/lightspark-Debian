<?xml version="1.0"?>
<mx:Application name="lightspark_utils_ByteArray_test"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	layout="absolute"
	applicationComplete="appComplete();"
	backgroundColor="white">

<mx:Script>
	<![CDATA[
	import flash.utils.ByteArray;
	import flash.utils.Endian;
	private function appComplete():void
	{
		var ba:ByteArray = new ByteArray();
		
		Tests.assertEquals(3, ByteArray.defaultObjectEncoding, "Default object encoding");
		Tests.assertEquals(0, ba.position, "Initial position");
		Tests.assertEquals(0, ba.length, "Initial length");
		Tests.assertEquals(Endian.BIG_ENDIAN, ba.endian, "Initial endian");

		ba.writeByte(42);
		Tests.assertEquals(1, ba.length, "Length after writeByte");
		ba.writeByte(257); //should only use lower 8 bits and write 1
		Tests.assertEquals(2, ba.length, "Length after another writeByte");
		ba.position = 0;
		Tests.assertEquals(42, ba.readByte(), "readByte");
		Tests.assertEquals(1, ba.readByte(), "another readByte");

		var ba2:ByteArray = new ByteArray();
		ba2[0] = 100;
		ba2[1] = 200
		ba2[2] = 300;
		ba.writeBytes(ba2);
		//should be [42, 1, 100, 200, 300] now
		Tests.assertEquals(5, ba.length, "Length after writeBytes");
		Tests.assertEquals(200, ba[3], "Read value written by writeBytes");

		var ba3:ByteArray = new ByteArray();
		ba3.writeDouble(-4.404500509e-300);
		Tests.assertEquals(8, ba3.length, "Length after writeDouble");
		ba3.position = 0;
		Tests.assertEquals(-4.404500509e-300, ba3.readDouble(), "Read value written by writeDouble");

		var ba4:ByteArray = new ByteArray();
		ba4.writeFloat(-4.5504006e-10);
		Tests.assertEquals(4, ba4.length, "Length after writeFloat");
		ba4.position = 0;
		Tests.assertEqualsDelta(-4.5504006e-10, ba4.readFloat(), 0.0000000001, "Read value written by writeFloat");

		var ba5:ByteArray = new ByteArray();
		ba5.writeDouble(-4.404500509e-300);
		Tests.assertEquals(8, ba5.length, "Length after writeDouble");
		ba5.writeFloat(-4.5504006e-10);
		Tests.assertEquals(12, ba5.length, "Length after writeFloat");
		ba5.position = 0;
		Tests.assertEquals(-4.404500509e-300, ba5.readDouble(), "Read value written by writeDouble");
		Tests.assertEqualsDelta(-4.5504006e-10, ba5.readFloat(), 0.0000000001, "Read value written by writeFloat");

		var ba6:ByteArray = new ByteArray;
		//Create an object with a reference to itself and multiple copies of the same string
		var complexObj:Object =  new Object();
		complexObj["int"] = 1;
		complexObj["number"] = 2.3;
		complexObj["null"] = null;
		complexObj["undefined"] = undefined;
		complexObj["recursive"] = complexObj;
		complexObj["str1"] = "StringVal";
		complexObj["str2"] = "StringVal";

		ba6.writeObject(complexObj);
		Tests.assertEquals(ba6.length, 78, "Serialization length");

		ba6.position = 0;
		var complexObj2:Object = ba6.readObject();

		Tests.assertEquals(complexObj2["int"], 1, "Int serialization");
		Tests.assertEquals(complexObj2["number"], 2.3, "Number serialization");
		Tests.assertEquals(complexObj2["null"], null, "Null serialization");
		Tests.assertEquals(complexObj2["undefined"], undefined, "Undefined serialization");
		Tests.assertEquals(complexObj2["recursive"], complexObj2, "Recursive serialization");
		Tests.assertEquals(complexObj2["str1"], "StringVal", "String serialization - Copy 1");
		Tests.assertEquals(complexObj2["str2"], "StringVal", "String serialization - Copy 2");

		var ba7:ByteArray = new ByteArray();
		ba7.writeByte(0xF0);
		ba7.writeByte(0xE0);
		ba7.writeByte(0xD0);
		ba7.writeByte(0xC0);
		ba7.writeByte(0xB0);
		ba7.writeByte(0xA0);
		ba7.writeByte(0x90);
		ba7.writeByte(0x80);

		ba7.endian = Endian.BIG_ENDIAN;
		ba7.position = 0;
		Tests.assertEquals(240, ba7.readUnsignedByte(), "readUnsignedByte (big endian)");
		ba7.position = 0;
		Tests.assertEquals(-3872, ba7.readShort(), "readShort (big endian)");
		ba7.position = 0;
		Tests.assertEquals(61664, ba7.readUnsignedShort(), "readUnsignedShort (big endian)");
		ba7.position = 0;
		Tests.assertEquals(-253701952, ba7.readInt(), "readInt (big endian)");
		ba7.position = 0;
		Tests.assertEquals(4041265344, ba7.readUnsignedInt(), "readUnsignedInt (big endian)");
		ba7.position = 0;
		Tests.assertEqualsDelta(-5.56616043718606e29, ba7.readFloat(), 1e19, "readFloat (big endian)");
		ba7.position = 0;
		Tests.assertEqualsDelta(-5.34656515363983e+235, ba7.readDouble(), 1e225, "readDouble (big endian)");

		ba7.endian = Endian.LITTLE_ENDIAN;
		ba7.position = 0;
		Tests.assertEquals(-7952, ba7.readShort(), "readShort (little endian)");
		ba7.position = 0;
		Tests.assertEquals(57584, ba7.readUnsignedShort(), "readUnsignedShort (little endian)");
		ba7.position = 0;
		Tests.assertEquals(-1060052752, ba7.readInt(), "readInt (little endian)");
		ba7.position = 0;
		Tests.assertEquals(3234914544, ba7.readUnsignedInt(), "readUnsignedInt (little endian)");
		ba7.position = 0;
		Tests.assertEqualsDelta(-6.527458190917969, ba7.readFloat(), 1e-10, "readFloat (little endian)");
		ba7.position = 0;
		Tests.assertEqualsDelta(-5.9196566415987e-306, ba7.readDouble(), 1e-316, "readDouble (little endian)");


		var ba8:ByteArray = new ByteArray();
		ba8.writeUTF("abc");
		ba8.position = 0;
		Tests.assertEquals(3, ba8.readShort(), "writeUTF: written length");
		ba8.position = 0;
		Tests.assertEquals("abc", ba8.readUTF(), "readUTF after writeUTF");

		Tests.report(visual, this.name);
	}
 ]]>
</mx:Script>

<mx:UIComponent id="visual" />

</mx:Application>
