<?xml version="1.0"?>
<mx:Application name="lightspark_comparison_operator_test"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	layout="absolute"
	applicationComplete="appComplete();"
	backgroundColor="white">

<mx:Script>
	<![CDATA[
	import Tests;
	private function appComplete():void
	{
		// NaN and integer
		var a:Number = NaN;
		Tests.assertFalse(a < 5, "NaN < 5", true);
		Tests.assertFalse(a <= 5, "NaN <= 5", true);
		Tests.assertFalse(a > 5, "NaN > 5", true);
		Tests.assertFalse(a >= 5, "NaN => 5", true);
		Tests.assertFalse(a == 5, "NaN == 5", true);
		Tests.assertFalse(5 < a, "5 < NaN", true);
		Tests.assertFalse(5 <= a, "5 <= NaN", true);
		Tests.assertFalse(5 > a, "5 > NaN", true);
		Tests.assertFalse(5 >= a, "5 => NaN", true);
		Tests.assertFalse(5 == a, "5 == NaN", true);

		// NaN and Number
		Tests.assertFalse(a < 5.3, "NaN < 5.3", true);
		Tests.assertFalse(a <= 5.3, "NaN <= 5.3", true);
		Tests.assertFalse(a > 5.3, "NaN > 5.3", true);
		Tests.assertFalse(a >= 5.3, "NaN => 5.3", true);
		Tests.assertFalse(a == 5.3, "NaN == 5.3", true);
		Tests.assertFalse(5.3 < a, "5.3 < NaN", true);
		Tests.assertFalse(5.3 <= a, "5.3 <= NaN", true);
		Tests.assertFalse(5.3 > a, "5.3 > NaN", true);
		Tests.assertFalse(5.3 >= a, "5.3 => NaN", true);
		Tests.assertFalse(5.3 == a, "5.3 == NaN", true);

		// NaN and NaN
		Tests.assertFalse(a < a, "NaN < NaN", true);
		Tests.assertFalse(a <= a, "NaN <= NaN", true);
		Tests.assertFalse(a > a, "NaN > NaN", true);
		Tests.assertFalse(a >= a, "NaN >= NaN", true);
		Tests.assertFalse(a == a, "NaN == NaN", true);

		// null and Integer
		var b:* = null;
		Tests.assertFalse(b < 0, "null < 0", true);
		Tests.assertTrue(b <= 0, "null <= 0", true);
		Tests.assertFalse(b > 0, "null > 0", true);
		Tests.assertTrue(b >= 0, "null >= 0", true);
		Tests.assertFalse(0 < b, "0 < null", true);
		Tests.assertTrue(0 <= b, "0 <= null", true);
		Tests.assertFalse(0 > b, "0 > null", true);
		Tests.assertTrue(0 >= b, "0 >= null", true);
		Tests.assertFalse(b == 0, "null == 0", true);
		Tests.assertFalse(0 == b, "0 == null", true);

		// null and Number
		Tests.assertFalse(b < 0.0, "null < 0.0", true);
		Tests.assertTrue(b <= 0.0, "null <= 0.0", true);
		Tests.assertFalse(b > 0.0, "null > 0.0", true);
		Tests.assertTrue(b >= 0.0, "null >= 0.0", true);
		Tests.assertFalse(0.0 < b, "0.0 < null", true);
		Tests.assertTrue(0.0 <= b, "0.0 <= null", true);
		Tests.assertFalse(0.0 > b, "0.0 > null", true);
		Tests.assertTrue(0.0 >= b, "0.0 >= null", true);
		Tests.assertFalse(b == 0.0, "null == 0.0", true);
		Tests.assertFalse(0.0 == b, "0.0 == null", true);

		// null and undefined equality
		Tests.assertTrue(undefined == b, "undefined == null", true);
		Tests.assertTrue(b == undefined, "null == undefined", true);

		Tests.report(visual, this.name);
	}
	]]>
</mx:Script>

<mx:UIComponent id="visual" />

</mx:Application>
